# .github/workflows/terraform.yml
name: "Terraform"
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
permissions:
  id-token: write
  contents: read

env:
  tf_version: '1.5.7'
  tg_version: '0.53.2'
  working_dir: environments

jobs:
  security_scan:
    name: 'Security scan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: triat/terraform-security-scan@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  fmt:
    name: 'Check Format'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: [ fmt, security_scan ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::263592406676:role/github
          role-session-name: githubsession
          aws-region: eu-west-1
      - id: 'auth'
        name: 'Authenticate to GCP'
        uses: 'google-github-actions/auth@v2'
        with:
          create_credentials_file: 'true'
          workload_identity_provider: 'projects/636145640792/locations/global/workloadIdentityPools/github/providers/github'
          service_account: 'github@piotr-main.iam.gserviceaccount.com'
      - id: 'gcloud'
        name: 'gcloud'
        run: |-
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud services list --project piotr-test-dev
      - name: Plan Terraform
        if: github.event_name == 'pull_request'
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'plan'
      - name: Apply Terraform
        if: github.event_name == 'push'
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'run-all apply -auto-approve'
